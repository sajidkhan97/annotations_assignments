1,
package Annotation;
import java.lang.reflect.Method;

public class Que1CustomAnnotation {

	@interface Test {
		int test_case();

	}

	@Test(test_case = 1)
	public static void meth1() {
		System.out.println("this is method 1");

	}

	@Test(test_case = 1)
	public void meth2() {
		System.out.println("this is method 2");
	}

	public static void main(String[] args) {
		meth1();
		// below we commintted we can create a new object to call the neew method ie non static 
		//Que1CustomAnnotation m= new Que1CustomAnnotation();
		//m.meth2();
				
	}
}

2.


package Annotation;
import java.lang.annotation.*;
import java.lang.reflect.*;  
//@Target(ElementType.METHOD)
//Target(ElementType.METHOD)
//@Target(ElementType.LOCAL_VARIABLE)
@Retention(RetentionPolicy.RUNTIME)
@interface info
{
	int ID();
	String name();
	String date();
	String time();
}
class hello
{
	@info(ID=1,name="Somnath",date="20-08-1998",time="9:30PM")
	
	public void abc()
	{
		System.out.print("manish");
	}
}
public class AnnotationQ2  {
   
	
	public static void main(String[] args) throws Exception
	{
	
         hello h=new hello();
         Method m=h.getClass().getMethod("abc");
         info i =m.getAnnotation(info.class);
         System.out.print(i.ID()+" "+i.name()+" "+ i.date()+" "+ i.time());
	}

}



3.



package Annotation;
import java.lang.annotation.*;
import java.lang.reflect.*;
@Retention(RetentionPolicy.RUNTIME)
//@Target(ElementType.METHOD)
@interface Execute
{
	int sequence();
}
class Myclass
{
	@Execute(sequence=2)
	public void mymethod1()
	{
		System.out.print("order2");
	}
	@Execute(sequence=1)
	public void mymethod2()
	{
		System.out.print("order1");
	
	}
	@Execute(sequence=3)
	public void mymethod3()
	{
		System.out.print("order3");
	
	}
}

public class AnnotationQ3{

	public static void main(String[] args) throws Exception {
		Myclass m=new Myclass();
		Method m1=m.getClass().getMethod("mymethod1");
		Method m2=m.getClass().getMethod("mymethod2");
		Method m3=m.getClass().getMethod("mymethod3");
		Execute e1=m1.getAnnotation(Execute.class);
		Execute e2=m2.getAnnotation(Execute.class);
		Execute e3=m3.getAnnotation(Execute.class);
      System.out.println(e1.sequence());

      System.out.println(e2.sequence());

      System.out.print(e3.sequence());

	}

}

